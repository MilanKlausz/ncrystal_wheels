################################################################################
##                                                                            ##
##  This file is part of NCrystal (see https://mctools.github.io/ncrystal/)   ##
##                                                                            ##
##  Copyright 2015-2022 NCrystal developers                                   ##
##                                                                            ##
##  Licensed under the Apache License, Version 2.0 (the "License");           ##
##  you may not use this file except in compliance with the License.          ##
##  You may obtain a copy of the License at                                   ##
##                                                                            ##
##      http://www.apache.org/licenses/LICENSE-2.0                            ##
##                                                                            ##
##  Unless required by applicable law or agreed to in writing, software       ##
##  distributed under the License is distributed on an "AS IS" BASIS,         ##
##  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  ##
##  See the License for the specific language governing permissions and       ##
##  limitations under the License.                                            ##
##                                                                            ##
################################################################################

################################################################################
#                                                                              #
# Exports NCrystal targets, and provides a few paths and values of build       #
# options.                                                                     #
#                                                                              #
# Geant4 targets will not be exported unless the GEANT4BINDINGS component is   #
# explicitly requested                                                         #
#                                                                              #
################################################################################


#Export a few directory paths (relocatable):
set( NCrystal_CMAKEDIR "${CMAKE_CURRENT_LIST_DIR}" )
get_filename_component( NCrystal_DIR "${NCrystal_CMAKEDIR}/@NCrystal_relpath_CMAKEDIR2ROOT@" ABSOLUTE )
get_filename_component( NCrystal_DATAROOT "${NCrystal_DIR}/@NCrystal_DATAROOT@" ABSOLUTE )

get_filename_component( NCrystal_BINDIR "${NCrystal_CMAKEDIR}/@NCrystal_relpath_CMAKEDIR2BINDIR@" ABSOLUTE )
get_filename_component( NCrystal_LIBDIR "${NCrystal_CMAKEDIR}/@NCrystal_relpath_CMAKEDIR2LIBDIR@" ABSOLUTE )
get_filename_component( NCrystal_INCDIR "${NCrystal_CMAKEDIR}/@NCrystal_relpath_CMAKEDIR2INCDIR@" ABSOLUTE )
if ( @INSTALL_PY@ AND NOT @NO_DIRECT_PYMODINST@ AND EXISTS "${NCrystal_CMAKEDIR}/@NCrystal_relpath_CMAKEDIR2PYPATH@/NCrystal/__init__.py" )
  get_filename_component( NCrystal_PYPATH "${NCrystal_CMAKEDIR}/@NCrystal_relpath_CMAKEDIR2PYPATH@" ABSOLUTE )
endif()
if ( @INSTALL_DATA@ )
  get_filename_component( NCrystal_DATAFILESDIR "${NCrystal_CMAKEDIR}/@NCrystal_relpath_CMAKEDIR2DATAFILESDIR@" ABSOLUTE )
endif()

#Config variables:
set( NCrystal_OPTION_BUILD_EXAMPLES      @BUILD_EXAMPLES@ )
set( NCrystal_OPTION_BUILD_G4HOOKS       @BUILD_G4HOOKS@ )
set( NCrystal_OPTION_INSTALL_MCSTAS      @INSTALL_MCSTAS@ )
set( NCrystal_OPTION_INSTALL_PY          @INSTALL_PY@ )
set( NCrystal_OPTION_INSTALL_DATA        @INSTALL_DATA@ )
set( NCrystal_OPTION_EMBED_DATA          @EMBED_DATA@ )
set( NCrystal_OPTION_INSTALL_SETUPSH     @INSTALL_SETUPSH@ )
set( NCrystal_OPTION_MODIFY_RPATH        @MODIFY_RPATH@ )
set( NCrystal_OPTION_NO_DIRECT_PYMODINST @NO_DIRECT_PYMODINST@ )

#Libname:
set( NCrystal_LIBNAME @NCrystal_LIBNAME@ )

#Various scripts:
set( NCrystal_CMD_NCMAT2CPP ${NCrystal_BINDIR}/ncrystal_ncmat2cpp )
if ( NOT EXISTS NCrystal_NCMAT2CPP )
  set( NCrystal_NCMAT2CPP "")
endif()
set( NCrystal_CMD_NCRYSTALCONFIG ${NCrystal_BINDIR}/ncrystal-config )
if ( NOT EXISTS NCrystal_CMD_NCRYSTALCONFIG )
  set( NCrystal_CMD_NCRYSTALCONFIG "")
endif()
set( NCrystal_CMD_NCRYSTALINSPECTFILE ${NCrystal_BINDIR}/ncrystal_inspectfile )
if ( NOT EXISTS NCrystal_CMD_NCRYSTALINSPECTFILE )
  set( NCrystal_CMD_NCRYSTALINSPECTFILE "")
endif()

#The NCrystal targets (not including the G4NCrystal targets!):
if(NOT TARGET NCrystal::NCrystal)
  include( "${NCrystal_CMAKEDIR}/NCrystalTargets.cmake" )
endif()

#For now GEANT4BINDINGS is the only optional component. To avoid injecting a
#dependency on Geant4 into non-Geant4 projects, the Geant4 dependency and G4NCrystal
#targets will only be added if the GEANT4BINDINGS component is explicitly
#requested.

set( NCrystal_COMPONENT_GEANT4BINDINGS OFF )

if ( NCrystal_OPTION_BUILD_G4HOOKS )
  #Build with Geant4 bindings. However, only load these targets (and the Geant4
  #dependency) if the GEANT4BINDINGS component was requested.
  if ( "GEANT4BINDINGS" IN_LIST NCrystal_FIND_COMPONENTS )
    if( NOT TARGET NCrystal::G4NCrystal )
      include( CMakeFindDependencyMacro )
      find_dependency( Geant4 @Geant4_VERSION@ EXACT REQUIRED )
      include( "${NCrystal_CMAKEDIR}/G4NCrystalTargets.cmake" )
      set( NCrystal_COMPONENT_GEANT4BINDINGS ON )
    endif()
  endif()
else()
  if ( NCrystal_FIND_REQUIRED_GEANT4BINDINGS )
    #GEANT4BINDINGS were explicitly requested but this installation does not
    #support it.
    set( NCrystal_FOUND FALSE )
  endif()
endif()

#Handle other requested components. For forward compatibility, silently ignore
#any requested component name we do not recognise, unless it is REQUIRED:
foreach(tmp ${NCrystal_FIND_COMPONENTS})
  if ( NCrystal_FIND_REQUIRED_${tmp} AND NOT "${tmp}" STREQUAL "GEANT4BINDINGS" )
    set( NCrystal_FOUND FALSE )
  endif()
endforeach()
