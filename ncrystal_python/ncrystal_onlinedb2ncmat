#!/usr/bin/env python3

################################################################################
##                                                                            ##
##  This file is part of NCrystal (see https://mctools.github.io/ncrystal/)   ##
##                                                                            ##
##  Copyright 2015-2022 NCrystal developers                                   ##
##                                                                            ##
##  Licensed under the Apache License, Version 2.0 (the "License");           ##
##  you may not use this file except in compliance with the License.          ##
##  You may obtain a copy of the License at                                   ##
##                                                                            ##
##      http://www.apache.org/licenses/LICENSE-2.0                            ##
##                                                                            ##
##  Unless required by applicable law or agreed to in writing, software       ##
##  distributed under the License is distributed on an "AS IS" BASIS,         ##
##  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  ##
##  See the License for the specific language governing permissions and       ##
##  limitations under the License.                                            ##
##                                                                            ##
################################################################################

"""
Script which can be used to generate NCMAT files from crystal structures in
online databases, and optionally also compare existing NCMAT files with online
structures indicated in their comments.
"""

try:
    import pymatgen
except ImportError:
    raise SystemExit('Could not import pymatgen module (perhaps install with "python3 -mpip install pymatgen")')
try:
    import pymatgen.symmetry.analyzer
except ImportError:
    raise SystemExit('Could not import pymatgen.symmetry.analyzer module (perhaps you are missing spglib?)')



################################################################################################
####### Common code for all NCrystal cmdline scripts needing to import NCrystal modules ########
import sys
pyversion = sys.version_info[0:3]
_minpyversion=(3,6,0)
if pyversion < _minpyversion:
    raise SystemExit('Unsupported python version %i.%i.%i detected (needs %i.%i.%i or later).'%(pyversion+_minpyversion))
import os
import pathlib

def maybeThisIsConda():
    return ( os.environ.get('CONDA_PREFIX',None) or
             os.path.exists(os.path.join(sys.base_prefix, 'conda-meta')) )

def fixSysPathAndImportNCrystal( *, allowfail = False ):
    thisdir = pathlib.Path( __file__ ).parent
    def extract_cmake_pymodloc():
        p = thisdir / 'ncrystal-config'
        if not p.exists():
            return
        with p.open('rt') as fh:
            for i,l in enumerate(fh):
                if i==30:
                    break
                if l.startswith('#CMAKE_RELPATH_TO_PYMOD:'):
                    l = l[24:].strip()
                    return ( thisdir / l ) if l else None
    pml = extract_cmake_pymodloc()
    hack_syspath = pml and ( pml / 'NCrystal' / '__init__.py' ).exists()
    if hack_syspath:
        sys.path.insert(0,str(pml.absolute().resolve()))
    try:
        import NCrystal
    except ImportError:
        if allowfail:
            return
        msg = 'ERROR: Could not import the NCrystal Python module'
        if maybeThisIsConda():
            msg += ' (if using conda it might help to close your terminal and activate your environment again)'
        elif not hack_syspath:
            msg += ' (perhaps your PYTHONPATH is misconfigured)'
        raise SystemExit(msg)
    return NCrystal

def ncImportSubModule( mainmodule, submodulename ):
    _ = __import__( '%s.%s' % ( mainmodule.__name__, submodulename ) )
    return getattr(_,submodulename)
################################################################################################
NC = fixSysPathAndImportNCrystal()
nc_cifutils = ncImportSubModule( NC, 'cifutils' )

import argparse
import re
import numpy as np

pdffn = 'ncrystal_onlinedb_validate.pdf'

def parse_args():
    descr="""
Script which can be used to generate NCMAT files from crystal structures in
online databases, and optionally also compare existing NCMAT files with online
structures indicated in their comments.

The script uses the pymatgen (Python Materials Genomics) module to query online
databases. Currently this means either the Crystallography Open Database
(https://www.crystallography.net/cod/) or the Materials Project
(https://www.materialsproject.org/). Access to the Materials Project through
this script requires an account and associated API key, which can be placed in
the environment variable MATERIALSPROJECT_USER_API_KEY.
"""
    parser = argparse.ArgumentParser(description=descr)
    parser.add_argument("--mpid",default=None,type=int,
                        help=('Structure ID (integer) of material from the Materials'
                              +' Project at https://www.materialsproject.org/.'))
    parser.add_argument("--codid",default=None,type=int,
                        help=('Structure ID (integer) of material from the Crystallography'
                              +' Open Database (COD) at https://www.crystallography.net/cod/'))
    parser.add_argument("--atomdb",default=None,type=str,
                        help=('Use with --mpid or --codid to remap an atom via @ATOMDB "X is ..." '
                              +'syntax. Examples "H is D" and "B is 0.9 B10 0.1 B11". Colons can'
                              +' be used in place of spaces if desired.'))
    parser.add_argument('--dynamics','-d',default=None,
                        help=('The name of data file from which to copy over dynamics'
                              +' information (based on Z-values to accommodate isotopic'
                              +' variation). If this argument is not provided, or if a '
                              +'required element is not present in the indicated file, '
                              +'dynamics will be created with a simple Debye temperature'
                              +f' of {nc_cifutils.value_fallback_debye_temp}K.'))
    parser.add_argument('--output','-o',default=None,
                        help=('Name of output file (specify "stdout" to print to stdout). If not'
                              +' supplied, a name will be automatically generated.'))
    parser.add_argument("--rawformat",default=False,action='store_true',
                        help=('Set to disable the replacement of common fractions in atom positions '
                              +'(e.g. leaving "0.6666667" as it is instead of replacing it with "1/6").'))
    parser.add_argument("--validate",nargs='*',metavar="FILE",
                        help=('List of existing NCMAT files which should be compared'
                              +' to crystal structures directly taken from online DBs (thus verifying'
                              +' that online DB references mentioned in comments in those files are'
                              +' actually valid).'))
    parser.add_argument("--pdf",default=False,action='store_true',
                        help=(f'Use with --validate to produce PDF file ({pdffn}) rather than interactive plots'))

    args=parser.parse_args()
    if args.atomdb and not (args.mpid or args.codid):
        parser.error('--atomdb requires --mpid or --codid')
    if int(args.mpid is not None)+int(args.codid is not None) + int(bool(args.validate)) != 1:
        parser.error('Must specify exactly one of --mpid, --codid, or --validate')
    if args.validate and (args.output or args.mpid or args.codid or args.dynamics):
        parser.error('Do not specify --output, --mpid, --codid, or --dynamics when running with --validate')
    if args.pdf and not args.validate:
        parser.error('Do not specify --pdf without --validate.')

    return args

args = parse_args()
args.dynamics = nc_cifutils.extractDynamics(args.dynamics) if args.dynamics else None

if not args.validate:
    assert args.codid or args.mpid
    fn = args.output
    quiet = (fn=='stdout')
    if args.codid:
        cifsrc = 'codid::%i'%args.codid
    else:
        assert args.mpid
        cifsrc = 'mpid::%i'%args.mpid

    autofn, out = nc_cifutils.lookupAndProduce( cifsrc,
                                                dynamics = args.dynamics,
                                                rawformat = args.rawformat,
                                                atomdb = args.atomdb,
                                                quiet = quiet )
    if not fn:
        fn = autofn
    if not quiet:
        print("Verifying that resulting ncmat data can be loaded")
    NC.directMultiCreate(out,'vdoslux=0;dcutoff=0.3')
    if fn=='stdout':
        print(out,end='')
    else:
        print(f"Writing {fn}")
        pathlib.Path(fn).write_text(out)
    raise SystemExit

_re_atomdbspecs = re.compile("\[ *with ([a-zA-Z ]+)->([ a-zA-Z0-9+-\.]+) *\]")
def extractAtomDBSpec(s):
    #Look for remapping specs like "[with H->D]" and return in @ATOMDB format
    #(i.e. "H is D").
    if not '->' in s:
        return
    m = _re_atomdbspecs.search(s)
    return ' '.join(('%s is %s'%m.groups()).split()) if m else None

def extractID(s,pattern):
    if not pattern in s:
        return None
    l=s.split(pattern)[1:]
    while l:
        e,l = l[0],l[1:]
        d=''
        while e and e[0].isdigit():
            d+=e[0]
            e=e[1:]
        if d and int(d)>0:
            yield int(d)

pdf = None
if args.pdf:
    import matplotlib
    matplotlib.use('agg')
    try:
        from matplotlib.backends.backend_pdf import PdfPages
    except ImportError:
        raise SystemExit("ERROR: Your installation of matplotlib does not have the required support for PDF output.")
    pdf = PdfPages(pdffn)

import matplotlib.pyplot as plt

for fn in args.validate:
    print(f'Attempting to validate {fn}')
    td = NC.createTextData(fn)
    ids = []
    for l in td:
        atomdb = extractAtomDBSpec(l)
        for e in extractID(l,'materialsproject.org/materials/mp-'):
            ids.append( dict(dbtype='mp',entryid=e,atomdb=atomdb))
        for e in extractID(l,'crystallography.net/cod/'):
            ids.append( dict(dbtype='cod',entryid=e,atomdb=atomdb))

    #order-preserving remove duplicates:
    _seen = set()
    newids=[]
    for d in ids:
        key = tuple(sorted((k,v) for k,v in d.items()))
        if key in _seen:
            continue
        newids.append(d)
        _seen.add(key)
    ids = newids

    multcreate = lambda data : NC.directMultiCreate(data,cfg_params='inelas=0;incoh_elas=0')
    mc = multcreate(td)
    dynamics = nc_cifutils.extractDynamics(mc.info)
    cmps = [ (fn, mc ) ]
    for _ in ids:
        dbname = _['dbtype']
        entryid = _['entryid']
        atomdb = _['atomdb']
        lpargs=dict(atomdb=atomdb,dynamics=dynamics,codid=None,mpid=None,rawformat=args.rawformat)
        if dbname=='mp':
            lpargs['mpid']=entryid
        else:
            assert dbname=='cod'
            lpargs['codid']=entryid
        _, out = lookupAndProduce(**lpargs)
        lbl=f'{dbname}-{entryid}'
        if atomdb:
            lbl = f'{lbl} with replacement "{atomdb}"'
        cmps.append( ( lbl, multcreate(out) ) )
    wlmax = max(1.05*NC.ekin2wl(mc.scatter.domain()[0]) for _,mc in cmps)
    wls = np.linspace(0.001,wlmax,10000)
    if len(cmps)<=1:
        print(f"No online DB IDs found in {fn}")
        continue

    for i,(lbl,mc) in enumerate(cmps):
        if '/' in lbl:
            lbl=lbl.split('/')[-1]
        elif lbl.startswith('mp-'):
            lbl = 'Materials Project entry '+lbl[3:]
        elif lbl.startswith('cod-'):
            lbl = 'Crystallography Open Database entry '+lbl[4:]
        #lw=2 if i>0 else 4
        lw=4 if i>0 else 2
        if pdf:
            lw *= 0.5
        args={}
        plt.plot(wls,mc.scatter.xsect(wl=wls),
                 label=lbl,
                 linewidth=lw,
                 alpha=0.5 if i==0 else 0.5,
                 color = 'black' if i==0 else None,
                 dashes = [] if i==0 else [4 if len(cmps)>2 else 2,2]+[2,2]*i)
    plt.xlim(0.0)
    plt.ylim(0.0)
    plt.title('NB: This compares the crystal structure (space group, lattice, atom positions). Phonons/dynamics always taken from .ncmat file',fontsize=6)
    plt.xlabel('Neutron wavelength (%s)'%(b'\xc3\x85'.decode()))
    plt.ylabel('Coherent elastic cross section (barn)')
    plt.legend(loc='best',handlelength=5)
    plt.grid()
    plt.tight_layout()
    if pdf:
        pdf.savefig()
        plt.close()
    else:
        plt.show()

if pdf:
    pdf.close()
    print("created %s"%pdffn)
